//symmetric4.xm
#version 330

#extension GL_OES_standard_derivatives : enable

#ifdef GL_ES
precision highp float;
#endif

// glslsandbox uniforms
uniform float time;
uniform vec2 resolution;

// shadertoy emulation
#define iTime time/1000
#define iResolution resolution

// Emulate a black texture
#define texture(s, uv) vec4(0.0)

// Emulate some GLSL ES 3.x
vec3 tanh(vec3 x) {
    vec3 ex = exp(2.0 * x);
    return ((ex - 1.) / (ex + 1.));
}

// --------[ Original ShaderToy begins here ]---------- //
// CC0 - Neonwave sunrise
//  Inspired by a tweet by I wanted to create something that looked
//  a bit like the tweet. This is the result.

#define RESOLUTION    iResolution
#define TIME          iTime
#define PI            3.141592654
#define TAU           (2.0*PI)

#define SHOW_FFT


// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488
const vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
vec3 hsv2rgb(vec3 c) {
  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);
  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);
}
// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488
//  Macro version of above to enable compile-time constants
#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))

// License: Unknown, author: Unknown, found: don't remember
vec4 alphaBlend(vec4 back, vec4 front) {
  float w = front.w + back.w*(1.0-front.w);
  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;
  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);
}

// License: Unknown, author: Unknown, found: don't remember
vec3 alphaBlend(vec3 back, vec4 front) {
  return mix(back, front.xyz, front.w);
}

// License: Unknown, author: Unknown, found: don't remember
float tanh_approx(float x) {
  //  Found this somewhere on the interwebs
  //  return tanh(x);
  float x2 = x*x;
  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);
}

// License: Unknown, author: Unknown, found: don't remember
float hash(float co) {
  return fract(sin(co*12.9898) * 13758.5453);
}

// License: Unknown, author: Unknown, found: don't remember
float hash(vec2 p) {
  float a = dot (p, vec2 (127.1, 311.7));
  return fract(sin(a)*43758.5453123);
}

// Value noise: https://iquilezles.org/articles/morenoise
float vnoise(vec2 p) {
  vec2 i = floor(p);
  vec2 f = fract(p);

  vec2 u = f*f*(3.0-2.0*f);
//  vec2 u = f;

  float a = hash(i + vec2(0.0,0.0));
  float b = hash(i + vec2(1.0,0.0));
  float c = hash(i + vec2(0.0,1.0));
  float d = hash(i + vec2(1.0,1.0));

  float m0 = mix(a, b, u.x);
  float m1 = mix(c, d, u.x);
  float m2 = mix(m0, m1, u.y);

  return m2;
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/spherefunctions/spherefunctions.htm
vec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {
  vec3 oc = ro - sph.xyz;
  float b = dot( oc, rd );
  float c = dot( oc, oc ) - sph.w*sph.w;
  float h = b*b - c;
  if( h<0.0 ) return vec2(-1.0);
  h = sqrt( h );
  return vec2(-b - h, -b + h);
}

// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/
float mod1(inout float p, float size) {
  float halfsize = size*0.5;
  float c = floor((p + halfsize)/size);
  p = mod(p + halfsize, size) - halfsize;
  return c;
}

// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/
vec2 mod2(inout vec2 p, vec2 size) {
  vec2 c = floor((p + size*0.5)/size);
  p = mod(p + size*0.5,size) - size*0.5;
  return c;
}

// License: Unknown, author: Unknown, found: don't remember
vec2 hash2(vec2 p) {
  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));
  return fract(sin(p)*43758.5453123);
}

float hifbm(vec2 p) {
  const float aa = 0.5;
  const float pp = 2.0-0.;

  float sum = 0.0;
  float a   = 1.0;

  for (int i = 0; i < 5; ++i) {
    sum += a*vnoise(p);
    a *= aa;
    p *= pp;
  }

  return sum;
}

float lofbm(vec2 p) {
  const float aa = 0.5;
  const float pp = 2.0-0.;

  float sum = 0.0;
  float a   = 1.0;

  for (int i = 0; i < 2; ++i) {
    sum += a*vnoise(p);
    a *= aa;
    p *= pp;
  }

  return sum;
}

float hiheight(vec2 p) {
  return hifbm(p)-1.8;
}

float loheight(vec2 p) {
  return lofbm(p)-2.15;
}

vec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, vec3 off, float n) {
  float h = hash(n);
  float s = mix(0.05, 0.25, h);

  vec3 hn;
  vec2 p = (pp-off*2.0*vec3(1.0, 1.0, 0.0)).xy;

  const vec2 stp = vec2(0.5, 0.33);
  float he    = hiheight(vec2(p.x, pp.z)*stp);
  float lohe  = loheight(vec2(p.x, pp.z)*stp);

  float d = p.y-he;
  float lod = p.y - lohe;

  float aa = distance(pp, npp)*sqrt(1.0/3.0);
  float t = smoothstep(aa, -aa, d);

  float df = exp(-0.1*(distance(ro, pp)-2.));
  vec3 acol = hsv2rgb(vec3(mix(0.9, 0.6, df), 0.9, mix(1.0, 0.0, df)));
  vec3 gcol = hsv2rgb(vec3(0.6, 0.5, tanh_approx(exp(-mix(2.0, 8.0, df)*lod))));

  vec3 col = vec3(0.0);
  col += acol;
  col += 0.5*gcol;

  return vec4(col, t);
}

vec3 stars(vec2 sp, float hh) {
  const vec3 scol0 = HSV2RGB(vec3(0.85, 0.8, 1.0));
  const vec3 scol1 = HSV2RGB(vec3(0.65, 0.5, 1.0));
  vec3 col = vec3(0.0);

  const float m = 6.0;

  for (float i = 0.0; i < m; ++i) {
    vec2 pp = sp+0.5*i;
    float s = i/(m-1.0);
    vec2 dim  = vec2(mix(0.05, 0.003, s)*PI);
    vec2 np = mod2(pp, dim);
    vec2 h = hash2(np+127.0+i);
    vec2 o = -1.0+2.0*h;
    float y = sin(sp.x);
    pp += o*dim*0.5;
    pp.y *= y;
    float l = length(pp);

    float h1 = fract(h.x*1667.0);
    float h2 = fract(h.x*1887.0);
    float h3 = fract(h.x*2997.0);

    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*mix(scol0, scol1, h1*h1);

    vec3 ccol = col + exp(-(mix(6000.0, 2000.0, hh)/mix(2.0, 0.25, s))*max(l-0.001, 0.0))*scol;
    ccol *= mix(0.125, 1.0, smoothstep(1.0, 0.99, sin(0.25*TIME+TAU*h.y)));
    col = h3 < y ? ccol : col;
  }

  return col;
}

vec3 toSpherical(vec3 p) {
  float r   = length(p);
  float t   = acos(p.z/r);
  float ph  = atan(p.y, p.x);
  return vec3(r, t, ph);
}

const vec3 lpos   = 1E6*vec3(0., -0.15, 1.0);
const vec3 ldir   = normalize(lpos);

vec4 moon(vec3 ro, vec3 rd) {
  const vec4 mdim   = vec4(1E5*vec3(0., 0.4, 1.0), 20000.0);
  const vec3 mcol0  = HSV2RGB(vec3(0.75, 0.7, 1.0));
  const vec3 mcol3  = HSV2RGB(vec3(0.75, 0.55, 1.0));

  vec2 md     = raySphere(ro, rd, mdim);
  vec3 mpos   = ro + rd*md.x;
  vec3 mnor   = normalize(mpos-mdim.xyz);
  float mdif  = max(dot(ldir, mnor), 0.0);
  float mf    = smoothstep(0.0, 10000.0, md.y - md.x);
  float mfre  = 1.0+dot(rd, mnor);
  float imfre = 1.0-mfre;

  vec3 col = vec3(0.0);
  col += mdif*mcol0*4.0;

#if defined(SHOW_FFT)
  vec3 fcol = vec3(0.0);
  vec2 msp    = toSpherical(-mnor.zxy).yz;
  vec2 omsp   = msp;
  float msf   = sin(msp.x);
  msp.x       -= PI*0.5;
  const float mszy = (TAU/(4.0))*0.125;
  float msny  = mod1(msp.y, mszy);
  msp.y *= msf;

  const int limit = 1;
  for (int i = -limit; i <= limit; ++i) {
    vec2 pp     = msp+vec2(0.0, mszy*float(i));
    float d0    = abs(pp.y);
    vec2 cp     = vec2(0.055*abs(msny-float(i)), 0.25);
    float fft   = texture(iChannel0, cp).x;
    float d1    = length(pp)-0.05*fft;
    float h     =mix(0.66, 0.99, fft);
    vec3 mcol1  = hsv2rgb(vec3(h, 0.55, 1.0));
    vec3 mcol2  = hsv2rgb(vec3(h, 0.85, 1.0));
    fcol += mcol1*0.5*tanh_approx(0.0025/max(d0, 0.0))*imfre*pow(msf, mix(100.0, 10.0, fft));
    fcol += mcol2*5.0*tanh_approx(0.00025/(max(d1, 0.0)*max(d1, 0.0)))*imfre*msf;
  }
  float d0   = abs(msp.x);
  fcol += mcol3*0.5*tanh_approx(0.0025/max(d0, 0.0))*imfre;

  const float start = 18.0;
  col += fcol*smoothstep(start, start+6.0+2.0*abs(omsp.y), TIME);

#endif

  return vec4(col, mf);
}


vec3 skyColor(vec3 ro, vec3 rd) {
  const vec3 acol   = HSV2RGB(vec3(0.6, 0.9, 0.075));
  const vec3 lpos   = 1E6*vec3(0., -0.15, 1.0);
  const vec3 lcol   = HSV2RGB(vec3(0.75, 0.8, 1.0));

  vec2 sp     = toSpherical(rd.xzy).yz;

  float lf    = pow(max(dot(ldir, rd), 0.0), 80.0);
  float li    = 0.02*mix(1.0, 10.0, lf)/(abs((rd.y+0.055))+0.025);
  float lz    = step(-0.055, rd.y);

  vec4 mcol   = moon(ro, rd);

  vec3 col = vec3(0.0);
  col += stars(sp, 0.25)*smoothstep(0.5, 0.0, li)*lz;
  col  = mix(col, mcol.xyz, mcol.w);
  col += smoothstep(-0.4, 0.0, (sp.x-PI*0.5))*acol;
  col += tanh(lcol*li);
  return col;
}

vec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {
  float lp = length(p);
  vec2 np = p + 2.0/RESOLUTION.y;
  float rdd = 2.0;
  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);
  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);

  const float planeDist = 1.0;
  const int furthest = 12;
  const int fadeFrom = 10;

  const float fadeDist = planeDist*float(fadeFrom);
  const float maxDist  = planeDist*float(furthest);
  float nz = floor(ro.z / planeDist);

  vec3 skyCol = skyColor(ro, rd);


  vec4 acol = vec4(0.0);
  const float cutOff = 0.95;
  bool cutOut = false;

  // Steps from nearest to furthest plane and accumulates the color
  for (int i = 1; i <= furthest; ++i) {
    float pz = planeDist*nz + planeDist*float(i);

    float pd = (pz - ro.z)/rd.z;

    vec3 pp = ro + rd*pd;

    if (pp.y < 0. && pd > 0.0 && acol.w < cutOff) {
      vec3 npp = ro + nrd*pd;

      vec3 off = vec3(0.0);

      vec4 pcol = plane(ro, rd, pp, npp, off, nz+float(i));

      float nz = pp.z-ro.z;
      float fadeIn = smoothstep(maxDist, fadeDist, pd);
      pcol.xyz = mix(skyCol, pcol.xyz, fadeIn);
      pcol = clamp(pcol, 0.0, 1.0);

      acol = alphaBlend(pcol, acol);
    } else {
      cutOut = true;
      acol.w = acol.w > cutOff ? 1.0 : acol.w;
      break;
    }

  }

  vec3 col = alphaBlend(skyCol, acol);
  return col;
}

vec3 effect(vec2 p, vec2 q) {
  float tm= TIME*1.05;
  vec3 ro = vec3(0.0, 0.0, tm);
  vec3 dro= normalize(vec3(0.0, 0.09, 1.0));
  vec3 ww = normalize(dro);
  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)), ww));
  vec3 vv = normalize(cross(ww, uu));

  vec3 col = color(ww, uu, vv, ro, p);

  return col;
}

// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM
float sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }
// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM
vec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }

// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
vec3 aces_approx(vec3 v) {
  v = max(v, 0.0);
  v *= 0.6;
  float a = 2.51;
  float b = 0.03;
  float c = 2.43;
  float d = 0.59;
  float e = 0.14;
  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 q = fragCoord/RESOLUTION.xy;
  vec2 p = -1. + 2. * q;
  p.x *= RESOLUTION.x/RESOLUTION.y;
  vec3 col = vec3(0.0);
  col = effect(p, q);
  // col *= smoothstep(0.0, 8.0, TIME-abs(q.y));
  col = aces_approx(col);
  col = sRGB(col);
  fragColor = vec4(col, 1.0);
}

// --------------------------------- //
// --------[ Text Drawing]---------- //
// --------------------------------- //

vec2 uv;
const vec2 ch_size  = vec2(1.0, 2.0) * 0.6;              // character size (Y,X)
const vec2 ch_space = ch_size + vec2(1.0, 1.0);    // character distance Vector(X,Y)
const vec2 ch_start = vec2 (ch_space.x * -1.75, 3.25); // start position
      vec2 ch_pos   = vec2 (0.0, 0.0);             // character position(X,Y)
#define REPEAT_SIGN false // True/False; True=Multiple, False=Single

#define n0 ddigit(0x22FF);
#define n1 ddigit(0x0281);
#define n2 ddigit(0x1177);
#define n3 ddigit(0x11E7);
#define n4 ddigit(0x5508);
#define n5 ddigit(0x11EE);
#define n6 ddigit(0x11FE);
#define n7 ddigit(0x2206);
#define n8 ddigit(0x11FF);
#define n9 ddigit(0x11EF);

#define A ddigit(0x119F);
#define B ddigit(0x927E);
#define C ddigit(0x007E);
#define D ddigit(0x44E7);
#define E ddigit(0x107E);
#define F ddigit(0x101E);
#define G ddigit(0x807E);
#define H ddigit(0x1199);
#define I ddigit(0x4466);
#define J ddigit(0x4436);
#define K ddigit(0x9218);
#define L ddigit(0x0078);
#define M ddigit(0x0A99);
#define N ddigit(0x8899);
#define O ddigit(0x00FF);
#define P ddigit(0x111F);
#define Q ddigit(0x80FF);
#define R ddigit(0x911F);
#define S ddigit(0x8866);
#define T ddigit(0x4406);
#define U ddigit(0x00F9);
#define V ddigit(0x2218);
#define W ddigit(0xA099);
#define X ddigit(0xAA00);
#define Y ddigit(0x4A00);
#define Z ddigit(0x2266);
#define _ ch_pos.x += ch_space.x;
#define s_dot     ddigit(0);
#define s_minus   ddigit(0x1100);
#define s_plus    ddigit(0x5500);
#define s_greater ddigit(0x2800);
#define s_less    ddigit(0x8200);
#define s_sqrt    ddigit(0x0C02);
#define nl1 ch_pos = ch_start;  ch_pos.y -= 3.0;
#define nl2 ch_pos = ch_start;  ch_pos.y -= 6.0;
#define nl3 ch_pos = ch_start;	ch_pos.y -= 9.0;
#define nl4 ch_pos = ch_start;	ch_pos.y -= 12.0;

float dseg(vec2 p0, vec2 p1)
{
	vec2 dir = normalize(p1 - p0);
	vec2 cp = (uv - ch_pos - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);
	return distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));   
}

bool bit(int n, int b)
{
	return mod(floor(float(n) / exp2(floor(float(b)))), 2.0) != 0.0;
}

float d = 1e6;

void ddigit(int n)
{
	float v = 1e6;	
	vec2 cp = uv - ch_pos;
	if (n == 0)     v = min(v, dseg(vec2(-0.405, -1.000), vec2(-0.500, -1.000)));
	if (bit(n,  0)) v = min(v, dseg(vec2( 0.500,  0.063), vec2( 0.500,  0.937)));
	if (bit(n,  1)) v = min(v, dseg(vec2( 0.438,  1.000), vec2( 0.063,  1.000)));
	if (bit(n,  2)) v = min(v, dseg(vec2(-0.063,  1.000), vec2(-0.438,  1.000)));
	if (bit(n,  3)) v = min(v, dseg(vec2(-0.500,  0.937), vec2(-0.500,  0.062)));
	if (bit(n,  4)) v = min(v, dseg(vec2(-0.500, -0.063), vec2(-0.500, -0.938)));
	if (bit(n,  5)) v = min(v, dseg(vec2(-0.438, -1.000), vec2(-0.063, -1.000)));
	if (bit(n,  6)) v = min(v, dseg(vec2( 0.063, -1.000), vec2( 0.438, -1.000)));
	if (bit(n,  7)) v = min(v, dseg(vec2( 0.500, -0.938), vec2( 0.500, -0.063)));
	if (bit(n,  8)) v = min(v, dseg(vec2( 0.063,  0.000), vec2( 0.438, -0.000)));
	if (bit(n,  9)) v = min(v, dseg(vec2( 0.063,  0.063), vec2( 0.438,  0.938)));
	if (bit(n, 10)) v = min(v, dseg(vec2( 0.000,  0.063), vec2( 0.000,  0.937)));
	if (bit(n, 11)) v = min(v, dseg(vec2(-0.063,  0.063), vec2(-0.438,  0.938)));
	if (bit(n, 12)) v = min(v, dseg(vec2(-0.438,  0.000), vec2(-0.063, -0.000)));
	if (bit(n, 13)) v = min(v, dseg(vec2(-0.063, -0.063), vec2(-0.438, -0.938)));
	if (bit(n, 14)) v = min(v, dseg(vec2( 0.000, -0.938), vec2( 0.000, -0.063)));
	if (bit(n, 15)) v = min(v, dseg(vec2( 0.063, -0.063), vec2( 0.438, -0.938)));
	ch_pos.x += ch_space.x;
	d = min(d, v);
}

vec3 hsv2rgb_smooth( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	

	return c.z * mix( vec3(1.0), rgb, c.y);
}

void mainText( out vec4 fragColor, in vec2 fragCoord ) 
{
	
	vec2 aspect = (resolution.xy / resolution.y) + 0.2;
	uv = ( fragCoord.xy / resolution.y ) - aspect / 2.0;
	float _d =  1.0-length(uv);
	uv *= 18.0 ;
	uv -= vec2(-7., 1.);

	vec3 ch_color = hsv2rgb_smooth(vec3(iTime*0.4+uv.y*0.1,0.5,0.5));
	uv.x += 0.7+sin(iTime+uv.y*0.7)*0.5;
	ch_pos = ch_start;
	
	
nl1
nl2
_ _ L I G H T A M P nl3


	vec3 color = mix(ch_color, vec3(0,0,0), 1.0- (0.09 / d*2.0));  // shading
	fragColor = vec4(color, 1.0);
}

void secText( out vec4 fragColor, in vec2 fragCoord ) 
{
	
	vec2 aspect = (resolution.xy / resolution.y) - 1.3;
	uv = ( fragCoord.xy / resolution.y ) - aspect / 2.0;
	float _d =  1.0-length(uv);
	uv *= 18.0 ;
	uv -= vec2(-7., 1.);

	vec3 ch_color = hsv2rgb_smooth(vec3(iTime*0.4+uv.y*0.1,0.5,0.5));
	uv.x += -60.0 + (iTime*3);
	ch_pos = ch_start;
	
A _ N E W _ R E L E A S E _ F O R _ U s_dot B I G _ T H A N K S _ T O _ A L L _ T H E _ P P L _ O U T _ T H E R E _ W H O _ M A D E _ T H I S _ P O S S I B L E s_dot
Y O U _ A R E _ A W E S O M E s_dot s_dot s_dot

	vec3 color = mix(ch_color, vec3(0,0,0), 1.0- (0.09 / d*1.0));  // shading
	fragColor = vec4(color, 1.0);
}

// --------------------------------- //
// --------[ ICON Drawing]---------- //
// --------------------------------- //

const vec2 bitmap_size = vec2(96, 96);
const int[] palette = int[] (
0x00000000,
0x000b121a,
0x00221a10,
0x001c1f09,
0x0011230b,
0x001b1c1f,
0x0010192c,
0x00161c23,
0x0020252a,
0x00212c14,
0x00252627,
0x001c2d15,
0x00322a20,
0x001d2634,
0x00242731,
0x0015263a,
0x001f292f,
0x00193217,
0x001c2b32,
0x003b3118,
0x002c2c2f,
0x00262c31,
0x001b2c4b,
0x00192b51,
0x0026303e,
0x002f313c,
0x00323336,
0x00273339,
0x002d3338,
0x001c353d,
0x00203247,
0x002e3b27,
0x0041382d,
0x0022363e,
0x0038393b,
0x002d3745,
0x002d3940,
0x0033393f,
0x00343843,
0x00393842,
0x00233d47,
0x003d3d47,
0x003e3f43,
0x00393f45,
0x00323b55,
0x00323a59,
0x003a3e4a,
0x002b4048,
0x00313e4d,
0x00344047,
0x00454044,
0x00363f4c,
0x002f3c5c,
0x00273c5f,
0x002e4a30,
0x003c4541,
0x003e4051,
0x0046463e,
0x002a4059,
0x00304156,
0x00404159,
0x0041464f,
0x003c474e,
0x003d4653,
0x00334850,
0x00384656,
0x00384850,
0x002d4951,
0x005c4f3b,
0x0028466e,
0x002c563b,
0x00434c5a,
0x00434b5e,
0x00404e56,
0x0042486c,
0x003f4d5d,
0x0034496f,
0x003d496e,
0x003c515a,
0x004c505a,
0x00374e67,
0x003f5a40,
0x00285261,
0x003d5062,
0x00525940,
0x0036535b,
0x004c5452,
0x00444e68,
0x003e4e6a,
0x0056554f,
0x004a5363,
0x00455365,
0x0049565d,
0x004b5a6d,
0x00525a6f,
0x00576749,
0x003f5880,
0x00365786,
0x0048597d,
0x004d5b77,
0x003e5c78,
0x005a5e6a,
0x00545f69,
0x005b5d70,
0x006c6455,
0x00486b49,
0x00465c7a,
0x00616459,
0x00465e74,
0x004d616a,
0x00616362,
0x005c6366,
0x00516275,
0x004c5c93,
0x003c6285,
0x004f6e5c,
0x003e6a73,
0x00447259,
0x003c7758,
0x00436595,
0x004b6790,
0x00566988,
0x00536c82,
0x006d7268,
0x004b6b88,
0x006b6f73,
0x005c6d7f,
0x00636e7a,
0x007d7363,
0x00646a87,
0x0057698f,
0x005b7078,
0x0048759f,
0x00637799,
0x005575a5,
0x006075a3,
0x005e789d,
0x00547d90,
0x0056799f,
0x008a8274,
0x00747d8c,
0x00717a97,
0x006e7e8c,
0x00677e8e,
0x00788184,
0x00508e77,
0x00689076,
0x007a8d7b,
0x00707bc0,
0x007088ad,
0x007086b6,
0x009a9285,
0x00818aa6,
0x00658ea1,
0x006689b1,
0x005b8ab3,
0x007e8e9d,
0x00848e9d,
0x00889193,
0x006888ba,
0x00788fa0,
0x007590c8,
0x006f91ca,
0x006f94c7,
0x007694c6,
0x007d96c6,
0x007f99bf,
0x007799c2,
0x00749eb3,
0x007199c4,
0x008e9eb0,
0x00949fac,
0x009b9eaf,
0x0087a0b0,
0x0094a3a3,
0x008fa1ab,
0x008fa798,
0x009fa3a8,
0x009ea997,
0x00aaa6a0,
0x00a2a6a4,
0x007fb095,
0x00a9aead,
0x0086a3dd,
0x0080a5d9,
0x00a0b3a4,
0x0087a5d8,
0x007da8d3,
0x0087a9d3,
0x008faacf,
0x009db5ab,
0x00acb4ab,
0x0096b0bf,
0x0077acd5,
0x009fadc8,
0x00a5afc0,
0x009fb1bf,
0x008eb2c1,
0x00adadca,
0x0088b2c4,
0x00a5b3b9,
0x00b0b6b8,
0x0086b8da,
0x008cb8e0,
0x00a5bdcc,
0x00adbec7,
0x00adbcce,
0x0094bdd2,
0x0096b7e5,
0x009dbed0,
0x008fbcdb,
0x0098c1cb,
0x0099bbe1,
0x00bbbfcf,
0x00b1c8bb,
0x00bcc5c3,
0x00b1bfdb,
0x00adc6d5,
0x00b9c9c9,
0x00b5c5d7,
0x00b5c7d2,
0x0095d2bc,
0x009eccea,
0x00a7c8f6,
0x00bfcce5,
0x00bdcee0,
0x00b7cfe0,
0x00bed0db,
0x00a8cbf2,
0x00accee9,
0x00c4caf1,
0x00ccd4d3,
0x00c6d7d6,
0x00b1d7fe,
0x00b9d7fe,
0x00b3dafb,
0x00addbfa,
0x00c6dbf6,
0x00a3e8da,
0x00bcddfc,
0x00b6ddfe,
0x00d5e3e3,
0x00b6e0f9,
0x00c0e3fb,
0x00dde3fa,
0x00ddebed,
0x00c5eeeb,
0x00cae8fe,
0x00ccecfb,
0x00d3ebff,
0x00d9f0f2,
0x00d5eefc,
0x00e6f6f7,
0x00f3fcfc,
0x00fafdfc
);
const int longs_per_line = 24;
const int[] bitmap = int[] (
0xe2ddeeee, 0xe7e8e8e8, 0xe8f5f1f1, 0xfdfde8e8, 0xfefefdfe, 0x90dae7fc, 0x6e3d2222, 0x6e6e6e6e, 0x6e6e6e6e, 0x6f6e6e6e, 0xa38acfad, 0xa3a1a1a2, 0xa1a2a2a2, 0x79a1a1a4, 0x6e6f6565, 0xadd3cf83, 0xc9c9b6b6, 0xe3dab1b1, 0xfcfaf5f1, 0x37b6f1f5, 0x090b0b0b, 0x730b0b09, 0x1f365169, 0x0000006e,
0x91ddeeee, 0xe8dac99e, 0xf1e8f1e8, 0xfdfdfcf1, 0xf5fefdfe, 0x66c9f1f5, 0x6e6e6f4f, 0x6e6e6f6e, 0x6e6e6e6e, 0x5c666f6f, 0xa28ac5ad, 0xa2a2a2a2, 0xa1a1a1a1, 0x82a1a1a1, 0xa07e665a, 0xadc5cfc5, 0xaeb1b6b6, 0xe7b1b6b6, 0xfafaf5f1, 0xc9f5f5fa, 0x0b0b0b1f, 0x510b090b, 0x221f4669, 0x00000000,
0x7692eeee, 0xf1e89075, 0xf5f1f1e8, 0xfdfdfdf1, 0xfdfdfdfd, 0x6fb1d7f1, 0x6e6e6e6f, 0x6666666f, 0x8f8f7e70, 0xc5c5ada0, 0xa29ac7cf, 0xa2a2a2a2, 0xa1a1a1a1, 0x87a1a1a1, 0xd3d3d3ad, 0xb19ca0c5, 0xc9b6b6b6, 0xb4b1b6b6, 0xfafaf5e8, 0xf5fcfcfa, 0x0b090990, 0x360b090b, 0x391f3669, 0x00000000,
0x9275b5ee, 0xe7fcfcda, 0xf5f1e8e7, 0xfcfcf5f1, 0xf1fdfdfd, 0x6f9ef1f1, 0xa08f7066, 0xcfc5adad, 0xcfcfcfd1, 0xa6c7c7c7, 0xa39f9aa8, 0xa1a1a1a2, 0xa1a1a1a1, 0x9aa2a1a1, 0x8ca0adad, 0xb4b4b19e, 0xb6b6b6b6, 0xaeb6b6b6, 0xfcf5e8b1, 0xfafafcfc, 0x0b0909b6, 0x360b090b, 0x001f1f69, 0x00000000,
0xf5b075dd, 0xdaf1fdfe, 0xf5f1e7d7, 0xfdfdfefd, 0xfcfcfefd, 0xa09dfdfd, 0xd3d3d3c5, 0xa8a8c7c5, 0xc7a895a8, 0xded4cfbd, 0xa3a3a4d4, 0xa1a1a1a2, 0xa1a1a1a1, 0x96a2a3a1, 0xb1b19e8f, 0xb4b4b4b4, 0xb6b6b6b4, 0xc9b6b6b6, 0xe8c9aeb6, 0xf1fafcf1, 0x0b0909b6, 0x360b090b, 0x00000951, 0x00000000,
0xfdfcae91, 0xd7d7f5fe, 0xfcf1dad7, 0xfefefdfd, 0xfefdfdfd, 0xd3aafdfe, 0xa87489a8, 0xe4ded4c7, 0xf0f0ebeb, 0xe9ebf0f0, 0xa3a3a2bb, 0xa1a4a4a4, 0xa2a2a2a2, 0xa4a2a2a2, 0xb4b19d82, 0xb4b4b4b4, 0xb6b6b6b6, 0xb6b4b6b6, 0xd7e7f1f1, 0xb6c9c9c8, 0x0b0b0b90, 0x36090b0b, 0x0000001f, 0x00000000,
0xfefefc92, 0xd7d7e7fd, 0xf5e8dad7, 0xfdfdfcf5, 0xfefdfcf5, 0xadaafdfd, 0xbdadc5c5, 0xebebebf0, 0xebf0ebeb, 0xcbf0f0f0, 0xa1a3a3a3, 0xa2a3a1a1, 0xa2a2a2a2, 0xa2a2a3a3, 0x8c8187a4, 0xb4b4b19d, 0xb6b6b6b4, 0xb4b4b6b6, 0xfdfdfde7, 0x56d7f5fd, 0x0b0b0b1f, 0x1f090b09, 0x00000054, 0x00000000,
0xfdfefdbe, 0xdad6daf5, 0xe8e8e8e8, 0xfdfdfcf1, 0xfdfefce7, 0x9cc8fdfd, 0x95ada0a0, 0xebebebeb, 0xefeff0eb, 0xa4e4efef, 0xa4a1a1a2, 0xa2a2a2a3, 0xa2a2a2a2, 0xa3a3a3a3, 0x889a9aa3, 0x9d8e7e82, 0xb6b6b4ae, 0xb4b4b4b6, 0xfdfdfcb6, 0xd7fdfdfd, 0x091f1f39, 0x390c0c09, 0x00000000, 0x00000000,
0xf5fdf192, 0xdad7d7da, 0xf1f1f1f1, 0xf5fcfcfc, 0xfdfdfcd7, 0xb1b4e7fd, 0x85aeb1b1, 0xf0f0ebe4, 0xebebf0f0, 0xa3bbe4eb, 0xa3a3a3a3, 0xa3a2a2a3, 0xa3a2a2a2, 0xbba9a3a3, 0xe9e4d4bc, 0xbde4ebe9, 0xb6b69d95, 0xb49e90ae, 0xfdfde7b1, 0xfdfdfdfd, 0x1f20549e, 0x00004420, 0x00000000, 0x00000000,
0x93937376, 0xe8927b92, 0xf5f5f5f5, 0xdafcfcfa, 0xf5fdfde7, 0x9eb4b4d7, 0x85b1b19e, 0xf0f0ebd4, 0xebebf0f0, 0xa3a3bbe4, 0xa3a3a3a3, 0xa3a2a2a3, 0xbca4a3a3, 0xf2ebe4d4, 0xebf0f0f0, 0xe9ebebeb, 0x6f9085d4, 0xb1b46e27, 0xfdfcbfae, 0xfefdfdfd, 0x000000d7, 0x00000000, 0x00000000, 0x00000000,
0x75767676, 0xf5da7375, 0xf5f5f5f5, 0xdae8faf5, 0xb6d7e7e8, 0x90b4b4b4, 0x8fae7d2a, 0xf0f0e9bb, 0xe4ebf0f0, 0xa2a2a3a9, 0xa3a3a3a3, 0xa3a2a2a3, 0xebebd4a9, 0xf2efefef, 0xf0f0f0f0, 0xebf0f0f0, 0x2658bde9, 0xb1b4ae27, 0xfde7ae7b, 0xfdfdfdfd, 0x000068e7, 0x00000000, 0x00000000, 0x00000000,
0x51695151, 0xf5f5cd9e, 0xf5f5f5f5, 0xd7dae8f5, 0xb4b6b6c9, 0x9eb4b4b4, 0x81652727, 0xf0f0e4a4, 0xa4deebf0, 0xa2a2a2a3, 0xa3a3a3a2, 0xbc9fa3a3, 0xebebf0ec, 0xefefefef, 0xf0f0f0f0, 0xf0ebf0f0, 0x3085e4eb, 0xb1b4b47d, 0xfcb27b7b, 0xfdfdfdfd, 0x000080e7, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0xfafaf5ae, 0xf1f5fafa, 0xc9c9cdda, 0xb4b1b6b6, 0x9eb1b4b4, 0x58262927, 0xf0f0cba3, 0xa2a4d0eb, 0xa2a2a3a3, 0xa3a3a3a2, 0xf0e4a59a, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xebebebeb, 0x4bbce9eb, 0xb1b1b49e, 0xb380007b, 0xfefdfef5, 0x00008bd7, 0x00000000, 0x00000000, 0x00000000,
0x9e000000, 0xfafaf5da, 0xe8f1f5f5, 0xc9c9c9d7, 0xb4b4aeb6, 0xaeb1b4b4, 0x412b2927, 0xe4eca9a3, 0xa2a3a3bc, 0xa2a2a3a3, 0x9a9fa3a2, 0xf0f0f0de, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xebf0f0f0, 0x88d4e9eb, 0xb4b1b4ab, 0x8b000068, 0xe7e7c997, 0x00000097, 0x00000000, 0x00000000, 0x00000000,
0x9e000000, 0xf5fafae8, 0xaec9f1fa, 0xb6c9b6b4, 0xb4b69e9e, 0xaeb1b4b4, 0x41292922, 0x8aa7a3a4, 0xa3a3a3a4, 0xa3a3a3a3, 0xeba686a3, 0xf0f0f0ef, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xebebebeb, 0xa5deebf0, 0xb0b4b48c, 0x00000059, 0x8b970000, 0x0000008b, 0x00000000, 0x00000000, 0x00000000,
0xae000000, 0xf1f5faf1, 0x7b90b1d7, 0x8080806e, 0xb4b4b48b, 0xaeb4b4b4, 0x3b2b292b, 0x8760a1a4, 0xa3a3a3a4, 0x9aa3a3a3, 0xefefde9a, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0ebebeb, 0xbadfebeb, 0x8bb49088, 0x00000068, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x9e9eb6d7, 0x000000b2, 0x6b000000, 0xb4b1b19e, 0x9eb4b4b4, 0x3b2b2e1c, 0xa14d78a7, 0xa3a3a2a2, 0xbd9ba3a3, 0xf2f3f3ef, 0xf0f0f2f2, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xebebebeb, 0xbae9ebeb, 0x808b7fa5, 0x00000080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x80000000, 0xb4904fb1, 0x5997b4b4, 0x412e2b14, 0xa1826482, 0xa3a3a3a3, 0xefe5a79a, 0xf0f0f0ef, 0xf0f0ebf0, 0xf0f0f0f0, 0xf0f0f0f0, 0xebebf0f0, 0xd4dee4e9, 0xd4ebebe9, 0x14658dba, 0x0000200c, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x97000000, 0x7d2e7db6, 0x025997b4, 0x312b2914, 0xa39a5753, 0x9aa3a3a3, 0xf3f3f3d4, 0xf0f0f0f3, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xe4ebf0f0, 0xd0d0d0d0, 0xe9e9ebde, 0x1a58b8ba, 0x130c141a, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x8b000000, 0x254f90b4, 0x050c2039, 0x3f292919, 0xa2a3585d, 0xeba79fa2, 0xf3f7f7f3, 0xf0f0f0ef, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xe4ebf0f0, 0xe4d4cbd4, 0xebebebe4, 0x2395bade, 0x0c222626, 0x00000013, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2b6f598b, 0x070c0c22, 0x492e2925, 0xa2a38257, 0xf7eb9aa2, 0xeff3f8f8, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xe9ebebf0, 0xebebebeb, 0xebebebeb, 0x62bad0e9, 0x20142b23, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2e6f1a00, 0x080a1a2e, 0x472e2b2b, 0xa2a29a4b, 0xf8f7e59b, 0xf0f2f7fb, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf3efeaf0, 0xe4e9f0f3, 0xebeae9df, 0xa7badfeb, 0x000c253b, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x336f1400, 0x15082431, 0x3f2e2e2b, 0xa3a3a450, 0xfbf8f3a6, 0xf0f2f3f9, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0ebf0f0, 0xefefeff0, 0xbad0e4e9, 0xe9bca1a5, 0xbad0e9eb, 0x00003e82, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x337f3900, 0x2507272e, 0x412b2e2b, 0x86a3a462, 0xfbfbf8e5, 0xf0f2f3f8, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xeaf0f0f0, 0xa5d0e4eb, 0x94949494, 0xd4879494, 0xbae9f0f0, 0x00005ea5, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x8b000000, 0x2b5c6f6e, 0x14141a2a, 0x00440c0a, 0x33901a00, 0x3107292e, 0x41252e2e, 0xa8a3a382, 0xf9fbfbf7, 0xf0eff3f7, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xa4bdf0f0, 0x94949494, 0xc3a69694, 0xa779f4e0, 0xd0ebf0e9, 0x00668dba, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x68440000, 0xaaccccae, 0x3e30317f, 0x1a222b3e, 0x339e4f20, 0x31152e33, 0x41262733, 0xd99aa387, 0xf8fbfbf9, 0xf0f2f3f3, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0x96def0f0, 0xd8c2c296, 0xe1e0e0e0, 0xbd87a6ce, 0xdeebf0eb, 0x0067a5b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x68000000, 0xd3c49e7b, 0x305dadc0, 0x3e3f3f31, 0x317f6f2a, 0x31252631, 0x4b332633, 0xf39aa387, 0xf7fbfbfb, 0xf0f2f3f3, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xe9eff0f0, 0xa5bdd4e4, 0xa5a5a5a6, 0xebdebca5, 0xe4ebf0f0, 0x7d8fbaba, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x9c7f5900, 0x70aaa099, 0x413f263f, 0x26383f42, 0x332e2e2e, 0x50473333, 0xf9a6a29a, 0xf7fbfbf9, 0xf0efeff3, 0xf0f0f0f0, 0xeff0f0f0, 0xf0f0efef, 0xebebf0f0, 0xebebf0f0, 0xe9e9e9e9, 0xf0ebe9e9, 0xe9ebebf0, 0x6595b7cb, 0x00000000, 0x80800000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x657b0000, 0x8e70708f, 0x3f233f5d, 0x252b3e31, 0x3f2b313e, 0x5848413f, 0xf8e59f9a, 0xf3f9fbfb, 0xf0efeff3, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0efef, 0xebebf0f0, 0xf0ebebf0, 0xf0f0f2f0, 0xf0ebebf0, 0xebebebeb, 0x5aa5bad4, 0x00000000, 0x80441300, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x59000000, 0x4b539c6f, 0x313e4b5d, 0x311c3e33, 0x472e233e, 0x6c57534b, 0xfbf3a987, 0xf7f9fbfb, 0xf0efefef, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0efef, 0xebf0f0f0, 0xf0ebebf0, 0xefebebeb, 0xe9ebebf0, 0xebebebeb, 0x5dbabade, 0x20000000, 0x00442014, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x539d7f00, 0x33494b4b, 0x2e153e3f, 0x483f2631, 0x6c635d53, 0xfbf7bc8a, 0xf7f8fbfb, 0xf0eff3f3, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0ebeff0, 0xebf0f0f0, 0xf0ebebf0, 0xebebebf0, 0xcbdeebf0, 0xebebe9de, 0x5b9abadf, 0x140c0090, 0x0059222b, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x9d6f6e00, 0x413f4b5b, 0x2e152b3f, 0x5b483315, 0xd4d9815b, 0xfbf9ebd4, 0xf7f8fbfb, 0xf0eff3f3, 0xf0efefef, 0xf0f0f0f0, 0xf0ebf0f0, 0xebf0f0f0, 0xf0ebebeb, 0xebebebf0, 0xbabae4eb, 0xebebd4b8, 0x62b8bae4, 0x3d2a2b4f, 0x00972a33, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00596880, 0x5b660000, 0x3f4b4b9c, 0x1c15313f, 0x5b5b3f08, 0xeff7e070, 0xf9f8f3eb, 0xf7f8fbf9, 0xf0efeff3, 0xf0f0f0ef, 0xf0f0f0f0, 0xf0f0f0f0, 0xebf0f0f0, 0xebebebeb, 0xf0eff0f0, 0xb7babce9, 0xe9e4bbba, 0x9ababce4, 0x3f3e4963, 0x00002a2e, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x227b8b97, 0x5c6b0020, 0x474b8c3f, 0x08103347, 0x5b5d481c, 0xebeff8d9, 0xf9f7efec, 0xf7f8fbfb, 0xe5f3deeb, 0xf0f0f0d4, 0xf0f0f0f0, 0xf0f0f0f0, 0xefeff0f0, 0xebf0f0f0, 0xebeff0f0, 0xbaa5b8d4, 0xdfa7baba, 0x96babadf, 0x234b6358, 0x00f13d2e, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x3d9e5900, 0x6f590a1a, 0x4b703f1b, 0x0e083147, 0xaa5d5b24, 0xebeff3f8, 0xf9f3ebeb, 0xe5f8fbf9, 0xa7e5debb, 0xf0f0f0ec, 0xefefefef, 0xeff2f2f0, 0xf3f3efef, 0xefefeff3, 0xe9ebf0ef, 0xb8b8b8d4, 0xbca5b7b7, 0xa5b8bad0, 0x335d6334, 0x0097321c, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x8e906800, 0x901a2548, 0x4b422323, 0x15083e47, 0xed7e5d30, 0xe9f0f0f7, 0xedefebbc, 0xa5e5f7ed, 0xa695d4a9, 0xefefeff0, 0xf3f3efef, 0xf3f3f3f3, 0xf3f3f7f7, 0xf3f3f3f3, 0xefefeff3, 0xbacbdeeb, 0xa5bab7ba, 0xbabababb, 0x5b5d5b4d, 0x00560a23, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0xaf590000, 0x83314953, 0x3f312466, 0x1c083f47, 0xf7d95d41, 0x9abde4ef, 0xbce4e996, 0xa3a7e5eb, 0xde959aa3, 0xf3f3f3f2, 0xf3f3f3f3, 0xf7f7f7f7, 0xf7f7f9f9, 0xf7f7f7f7, 0xf3eff3f3, 0xe4ebeff3, 0xe9d4d0de, 0xbab7babb, 0x5b5d4b78, 0x002a1c3f, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x90800000, 0x41474b8c, 0x183f1b83, 0x19153849, 0xbce58541, 0x729b9fa9, 0xa7bbe4d0, 0xa3a3a7d4, 0xef95968a, 0xf3f3f3ef, 0xf8f7f7f7, 0xf7f7f9f8, 0xf7f7f9f9, 0xf7f8f8f8, 0xf3eff3f7, 0xefefeff3, 0xebebebf0, 0xb7b7bcde, 0x5b5d5087, 0x7d2a2647, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x5c000000, 0x4b4b4bc4, 0x263e1b41, 0x23153324, 0xbba9d441, 0x87a9bbbb, 0xa79fbbe4, 0x8aa3a3a7, 0xf3a69595, 0xf7f7f7f3, 0xf8f7f7f8, 0xf7f8f9f9, 0xf8f7f7f7, 0xf7f9f8f8, 0xf3f3f7f7, 0xf3efeff3, 0xe4ebf3f7, 0xb7b7baa7, 0x414b5896, 0x32272b48, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x59000000, 0x47497fac, 0x3e311b41, 0x231b2410, 0xbba9d48f, 0x9abbbbbb, 0xa4869fa7, 0x8886a3a4, 0xf7cf9595, 0xf8f7f7f7, 0xf9f9f9f8, 0xfbfbfbfb, 0xf8f8f9f9, 0xf9f8f8f8, 0xeff3f8f9, 0xf3ebebef, 0xa9e4f7f8, 0xb7b7b7b8, 0x304158a5, 0x2a273347, 0x0000009e, 0x00000000, 0x00000000,
0x00000000, 0x80000000, 0x4b4bac9e, 0x491b2e47, 0x231b101b, 0xbba9cad1, 0xbbbbbbbb, 0xa4878a86, 0x85889aa4, 0xf7e58795, 0xfbf8f7f7, 0xfbfbfbfb, 0xfbfbf9fb, 0xf9fbf9f9, 0xf9f8f9f9, 0xf3f7f8f9, 0xefebebef, 0xb896ebf7, 0xa5bababa, 0x304164a5, 0x27263f33, 0x00000059, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x4b6ddb90, 0x49244747, 0x531b1524, 0xbba9caeb, 0xa7bbbbbb, 0xa79a8786, 0x85889596, 0xf8eb8788, 0xf9f9fbfb, 0xfbfbfbf9, 0xfbfbfbfb, 0xfbfbf9fb, 0xf8f8f9fb, 0xeaeff7f8, 0xeff0f2ef, 0xb7b896eb, 0x8989a7ba, 0x334185a6, 0x27263f30, 0x00000027, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x4b98db6f, 0x3f3f4b47, 0x991b1b33, 0xbbbbdef3, 0x9bbbbbbb, 0xa7a98888, 0x85859596, 0xf8ef9a88, 0xf9f9fbfb, 0xfbfbfbf9, 0xfbfbfbfb, 0xfbfbf9fb, 0xf8f8fbfb, 0xbbebf7f7, 0xebefebd4, 0xa5bab8a7, 0x93b59295, 0x3f4198c4, 0x2b313f26, 0x00000059, 0x0c200000, 0x00006868,
0x00000000, 0x80688000, 0x47cecd6e, 0x3f494b4b, 0xc0211b41, 0xd2e4f2f3, 0x78a7bbca, 0x9aa97888, 0x858582c2, 0xf7ef9a85, 0xf8f7f8f9, 0xfbf9f9f8, 0xf9f9f9fb, 0xfbfbf9fb, 0xf7f8fbfb, 0xbcded9f7, 0xa5cbbba3, 0xdbbdbabc, 0x735fb0f5, 0x483baa90, 0x2b332e33, 0x050a0c22, 0x1a1a0a05, 0x00008039,
0x44590000, 0x56392a20, 0x70c07f59, 0x47494947, 0xd918244b, 0xebf2f3f3, 0x858abbd2, 0xa6a78285, 0x828279aa, 0xf7eb8785, 0xf3f7f8f8, 0xfbfbf9f7, 0xfbfbf9fb, 0xf8fbfbfb, 0xf7f8f8f8, 0x9a95eff7, 0xa49fa39f, 0xfdedbdbc, 0x54b4f1fe, 0x5a30a07d, 0x2531263f, 0x08050a05, 0x1a272b19, 0x00000059,
0x2b225997, 0x4747473f, 0x4b534b47, 0x31312431, 0xc0182e42, 0xf2f2ebef, 0x797cbbde, 0xcca68279, 0x7979798d, 0xf7e58a79, 0xd4f7f7f8, 0xf8f8f8ef, 0xfbfbf9f8, 0xf8f8fbfb, 0xf3f7f7f7, 0x88d4f3f3, 0xba788288, 0xf1f1e5ba, 0x546bd7e7, 0x5b415d56, 0x1c33243f, 0x2b19080a, 0x591a272e, 0x00000000,
0x3f3f2a59, 0x494b4949, 0x4b4b4b49, 0x1b1b233f, 0x8e19191b, 0xe5d4cff3, 0x70829fd4, 0xcc858270, 0x79797970, 0xf3bd6062, 0xbcf3f7f7, 0xf3f3f3bc, 0xf9f7f3f7, 0xf7f7f9f9, 0xe5eff3f7, 0x87e4efef, 0x887c8588, 0xc8cdc2a5, 0x519ec3cd, 0x48417040, 0x0e2e1847, 0x2929270a, 0x0056142b, 0x00000000,
0xaaab9e6b, 0xafc0c4c0, 0x3041839c, 0x1b424942, 0x49181b1b, 0xcacad1ed, 0x5d7a9aca, 0xc08d7a5d, 0x7a7a7063, 0xeb966a63, 0xa7f2f3f3, 0xf0ebe58a, 0xebebf2f0, 0xefefebeb, 0xd2e4f3f3, 0xa4cbeaef, 0x7c858595, 0xacc3c07a, 0x505b8e9d, 0x48418579, 0x082b183f, 0x29292927, 0x0000391a, 0x00000000,
0xac906b6b, 0x8eaacccc, 0x8e9c9c8f, 0x42334183, 0x24181526, 0xbbc7f8c4, 0x485b95bb, 0x9c9d535b, 0x6363635d, 0xde8a6a58, 0xa9e4f3ef, 0xbde5d178, 0x83898fad, 0xefedc0a0, 0xd0a5e4eb, 0xbcbae4f0, 0x82828595, 0x5057576a, 0x96876250, 0x474182a4, 0x261c1b3f, 0x222b292b, 0x00008b39, 0x00000000,
0x7b800000, 0xc4cccc9e, 0x3f4b5da0, 0x3149493f, 0x1b183331, 0xdef8fa67, 0x4941a0a6, 0x81af2348, 0x63635d5d, 0xbc6a634b, 0xa3d4f2eb, 0xfdf5af78, 0x92b5b5fc, 0xedf5dddd, 0xcb9fbbe9, 0xb7b7bce4, 0x79799895, 0x87505879, 0x8686879a, 0x3f4158a4, 0x2b1c153d, 0x1a2b2b2b, 0x00000080, 0x00000000,
0x00000000, 0xc0c8907b, 0x3f7ec0c0, 0x3f424242, 0x24313142, 0xf8fbaf1b, 0x3331add9, 0x70ab183f, 0x5d5d5d5b, 0x96585d41, 0x95d2ebe4, 0xfefe9d79, 0x5493aefd, 0xedd6b573, 0xbc86a3d4, 0xb7b7bacb, 0x7a7998a5, 0x6a636c7a, 0xa3a3a396, 0x3e333aa1, 0x29271b2e, 0x201a2b26, 0x00000000, 0x00000000,
0x00000000, 0xac7b8000, 0x5da0c0cc, 0x3e3e3f3e, 0x313e4242, 0xfbdc3024, 0x3131adcc, 0x5baf1833, 0x5b5b5b57, 0x875b5b3f, 0xaaa8ebbc, 0xfcf17e70, 0x8bf1f5fc, 0xdb9e7354, 0xa5729f87, 0xbabab8ba, 0x707e95a5, 0x5d537070, 0xa2a2a482, 0x2e2e1e96, 0x25271c2e, 0x440c2226, 0x00000000, 0x00000000,
0x00000000, 0x6e000000, 0x8ec4d9c4, 0x423f3f41, 0x33313131, 0xe25a3033, 0x3123aaaa, 0x499c1b31, 0x484b4847, 0x625b5b42, 0x8189dea9, 0xc99d705d, 0x5f90c9c3, 0x7e7d5f5f, 0xa4789a9a, 0xbab7baba, 0x638f819a, 0x48415d63, 0x9695794b, 0x2e250d82, 0x2525152b, 0x00021426, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xc4d9c06f, 0x423f4bad, 0x181c3342, 0x1e242618, 0x2431af4b, 0x427f2426, 0x4848473f, 0x50484733, 0x589fbb96, 0xc37f6c53, 0x7dc8c8c8, 0x4d413751, 0xa48278a4, 0xbab7b7ba, 0x638d6362, 0x335b5d63, 0x16161e3f, 0x2b27070f, 0x27251525, 0x00200525, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xdbaa8e68, 0x425ac0c0, 0x23424242, 0x151c1b1b, 0x2642aa30, 0x33662424, 0x473f3f33, 0x48483f38, 0x96a3a382, 0x484b5850, 0x4b535b57, 0x87643b3b, 0xa4796296, 0xa7babab7, 0x5d8e4b58, 0x335a5d5d, 0x87822c48, 0x26290823, 0x251c0e25, 0x00201415, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xc4a09e00, 0x70c4c2e2, 0x493f3f49, 0x1b1b1833, 0x3f5bc318, 0x33472425, 0x3f3e3333, 0x48473333, 0xa1a3a34d, 0x58575b58, 0x82787c79, 0x868a8878, 0xa4797a78, 0x82babab7, 0x5d7e4b5d, 0x38485b5b, 0x957a3f3f, 0x27270e0d, 0x19190e25, 0x00201408, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x7ece7d00, 0xc0c4e2d9, 0x494b4770, 0x1c184247, 0x5b8ecd1b, 0x3126243f, 0x33333124, 0x3f3f242e, 0xa3a39a41, 0x4c5b5b58, 0x8787868a, 0xa4a99f9f, 0xa562628a, 0x58969aba, 0x5b5d4b5d, 0x3f48485b, 0x53412e23, 0x27250e08, 0x151a141c, 0x00201415, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x9cdc6e00, 0xc0e2e1a0, 0x4b4b83c0, 0x18494b4b, 0x7ec0c01b, 0x24233370, 0x33311c1c, 0x3d3f242e, 0xa3a4623f, 0x505b5b6c, 0x9a82869a, 0xa3a3a4a3, 0x956a6378, 0x5d956479, 0x483c415d, 0x3f474848, 0x01252e24, 0x2525140a, 0x0e1a1a1a, 0x00201425, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xcdc85900, 0xe2e3c45b, 0x4b7ec4c4, 0x5d7e7053, 0xaddb9d18, 0x242383a0, 0x311b1c26, 0x3e2e192e, 0xa39f3b2e, 0x57574870, 0x6486a182, 0xa4968860, 0x35586364, 0x5d799545, 0x4830415a, 0x3d3f3f47, 0x07262e25, 0x1a1a1c08, 0x1c19191a, 0x00681a26, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xe3ae8000, 0xe1db7e7f, 0x70c4c0e2, 0xa0a08f4b, 0xd9e18e6d, 0x1b4baac0, 0x1515251c, 0x2b2b1c25, 0xa982302e, 0x48484781, 0x82a1a450, 0x62646363, 0x344b5850, 0x5b58a587, 0x47233348, 0x2b2e333f, 0x05252525, 0x1a1a1c08, 0x2626271a, 0x00802a33, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xe19e8b00, 0xe1aa4baa, 0xc0c0e2e1, 0xc0c08f5b, 0xe2e270ad, 0x319ddcdb, 0x151c1c1b, 0x2b251c0e, 0xa750332b, 0x47474785, 0x8796854b, 0x57575b50, 0x964b4150, 0x485795b8, 0x33152347, 0x2b2b2e33, 0x08221c25, 0x1a1a1a08, 0x493d471a, 0x00686b5d, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xe3900000, 0xdb5e4bce, 0xc4d9e2e1, 0xcccc5daa, 0xe3cda0d1, 0x66dce3e3, 0x151b2431, 0x2b1c0e15, 0x88302e33, 0x38384779, 0x4c171e38, 0x5d5d5862, 0x962c5d63, 0x48487aba, 0x2e0e243f, 0x252b2b2e, 0x081c141a, 0x1c191c0a, 0x6566663e, 0x00006b8c, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xdc7b0000, 0x9c5b7fe1, 0xd9e2e2e1, 0xd9aaa0cc, 0xe3afccd9, 0xaae1e3e3, 0x1c2e2442, 0x2b08080e, 0x6a332b2e, 0x383d5e8f, 0xa482233d, 0x5d4d96a4, 0x585b5d5d, 0x47332385, 0x2b08193d, 0x1c1a252b, 0x0814141a, 0x1c19190a, 0x8c7f7f65, 0x0000549d, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xcd680000, 0x705baae1, 0xe2cec4c4, 0xdcaacccc, 0xdb9dccd9, 0xdce1e3e3, 0x38494266, 0x1c080a15, 0x232e2b2b, 0x3d2e7f7e, 0xa3502e3d, 0x4b79a2a2, 0x5b5b5a5b, 0x31231830, 0x25081c2e, 0x1a1c1c25, 0x151c141a, 0x19191c15, 0xaf9c9c8c, 0x00006b9c, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0xac680000, 0x7e7edbe1, 0x8c8cce8e, 0xd9cdc0c4, 0xc4c0d9d9, 0xe1e3e1e1, 0x4766429d, 0x080a0e3e, 0x262b2b26, 0x2e337f47, 0x85232933, 0x2395a2a3, 0x48484848, 0x15151847, 0x1c08142b, 0x141a1a1a, 0x3d471514, 0x65081c1c, 0xaaaaad9c, 0x0c20328e, 0x00000c0c, 0x00000000,
0x00000000, 0x00000000, 0x9e800000, 0x8faae2e1, 0xafdbc0a0, 0xab8e5b4b, 0x9cced9cd, 0xe1e1e1e1, 0x5d665ad9, 0x0a0e485d, 0x2b2b2b1c, 0x2b2e7d25, 0x2c19292e, 0x0d87a296, 0x4747473f, 0x0a0e2e3f, 0x190a151a, 0x14141919, 0x477f1514, 0x8c150a1a, 0x8c9d9c8c, 0x1a222666, 0x0c0c0c0a, 0x00000000,
0x00000000, 0x00000000, 0x90000000, 0xa0dce1e2, 0xdbceadad, 0x41425ac0, 0x7fdbaf70, 0xe1e1e2dc, 0x8f5b9ce2, 0x087f8e7e, 0x2e2e2b0e, 0x2b2e9019, 0x231a292e, 0x0d88a46c, 0x383f3f19, 0x0827252e, 0x1c08150a, 0x14141a1c, 0x2e9d1c1c, 0x6666080a, 0x5a8c7f83, 0x2b2b2726, 0x0a1c2627, 0x0000000a,
0x00000000, 0x00000000, 0x6e000000, 0xcce3e1cd, 0xd9adc3aa, 0x428ecddb, 0x8c9c4941, 0xdcdbdbc4, 0x9c48ccdb, 0x67abad8e, 0x332e1a0e, 0x2b2b7f26, 0x19262e2e, 0x1c797910, 0x2e2b2e08, 0x25192b2e, 0x1c150805, 0x1c1c191a, 0x0eaf3e19, 0x2e7f1c0a, 0x3d474f2e, 0x2b2e2e3d, 0x2a2b292b, 0x00000c14,
0x00000000, 0x00000000, 0x00000000, 0xe2e1e1ae, 0xc4c4cdc0, 0xabd9d9db, 0x663f3f5a, 0xdbd9db8c, 0x9d8cdbd9, 0xc4c3c0ad, 0x5d4f1531, 0x2b2e6747, 0x1c2b2e29, 0x26230d15, 0x2e2b2508, 0x1919262b, 0x1a080514, 0x19191919, 0x079d7f26, 0x275a6708, 0x66663e19, 0x31494f3e, 0x2b2e2b2b, 0x00201426,
0x00000000, 0x00000000, 0x00000000, 0xe2e3dc7d, 0xaadcadd9, 0xdbd9d9d9, 0x3f3f5ec3, 0xd9d9ce5a, 0x8ec0d9d9, 0xc4ceccc4, 0x8d6515af, 0x2e3d668e, 0x1b312b2e, 0x2b070825, 0x272b0e14, 0x14252527, 0x1a05081a, 0x2931333d, 0x087f9d3f, 0x192e7f2e, 0x7f9c7f2e, 0x2e5a7f8c, 0x1a222729, 0x6820221a,
0x00000000, 0x00000000, 0x00000000, 0xe2e3ab8b, 0xceafc0e2, 0xdcd9d9aa, 0x3f66c3db, 0xced9c042, 0x8fdcd9ce, 0xc0dbcecd, 0xaa4966cd, 0x2e3f7fad, 0x1b333331, 0x2a051527, 0x27290525, 0x15222226, 0x26051c1a, 0x4f475c5a, 0x152eac5d, 0x25254f7f, 0xc0aac47f, 0x2a678caa, 0x39200c14, 0x59392044,
0x00000000, 0x00000000, 0x00000000, 0xe1da8b00, 0xc07ecee1, 0xdbd9c0c4, 0x5ac4dbdb, 0xcdcc9c42, 0xafcececd, 0xccdcd9c4, 0x9d18acc0, 0x47419cc0, 0x4f5a5a5c, 0x26081c2b, 0x2b4f0e2b, 0x1c272725, 0x2e102519, 0x83665c66, 0x4f07ab8c, 0x47192b66, 0xcedccec4, 0x203d90c4, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0xe39e8000, 0x5d9dcedb, 0xdbceadc3, 0xc0dcdbdb, 0xcecc7042, 0xc0cccece, 0xced9ccaf, 0x8e83d9a0, 0x835baac0, 0x8e8d8e8f, 0x2508253e, 0x665c2b2b, 0x1926272b, 0x2b1a2719, 0x8c665a5a, 0x3d1c7fab, 0x9c261c2e, 0xc3d8dbdb, 0x00005990, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x9d6e0000, 0x66c4cde3, 0xdbadcc83, 0xceced9db, 0xc4aa419c, 0xc0c4cccc, 0xceccc0a0, 0x4babc49c, 0x8e70c0c0, 0x9c9c9ca0, 0x4933665c, 0x9c475a5a, 0x3e3e3e66, 0x15292719, 0x9c5a4747, 0x29273eac, 0xc35c2619, 0x6e9ecedb, 0x00000080, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x6b000000, 0x9dc4dcae, 0xc0c48e3f, 0xc0c0ccd9, 0xc08d7ec0, 0xc0c0c0c0, 0xc4a0aa8d, 0x6dcdadad, 0x8e7eaaad, 0x9c9ca09c, 0x66667f66, 0x8c2e6565, 0x65657f8c, 0x19292927, 0x8e3f3826, 0x2529268c, 0xd99d3325, 0x006890c8, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xc0dc9e6b, 0xa08e3e83, 0xadaac0c4, 0xa0708fa0, 0xadada0a0, 0x9c5baf8f, 0x9ccc8fad, 0x7e70ad8f, 0x9c9ca09c, 0x495c665e, 0x8e265a66, 0x7f8e9c98, 0x272b293d, 0x5a2e2e15, 0x1a272b38, 0xaec37f2b, 0x0000806e, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xcc9e6800, 0x7e3f3f8e, 0x8ea0aa9c, 0x8f4b707e, 0x8d8f8f8e, 0x5d3f9d7e, 0xadad5d81, 0x5d488e5d, 0x8e8c9c8e, 0x192e3f5d, 0x7f193d3e, 0x7f8c8c8c, 0x2a2a2938, 0x252b2915, 0x2b252b2b, 0x688b9e3d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x90590000, 0x3d3f66ab, 0x7e8d8e5b, 0x5b3f5b5e, 0x706d707e, 0x3f3f9c70, 0x81663f49, 0x66315d4b, 0x677f7e5a, 0x192b3149, 0x901c272b, 0x657f7f7f, 0x2a292926, 0x2708191c, 0x3331252b, 0x008b6890, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x56000000, 0x3f7f9e6e, 0x5d703f3e, 0x233f495b, 0x4b4b5b5b, 0x3f498e48, 0x47333f3f, 0x7f1b2442, 0x4947493e, 0x3d2e2b26, 0x8c261c29, 0x3d5c664f, 0x29292925, 0x2a250119, 0x9e4f2627, 0x0000006e, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8e8c6e7b, 0x3f333366, 0x333f3e3e, 0x3f3f4933, 0x3f3f7f3f, 0x3f313e3f, 0x7f1b153e, 0x2e3e3f3e, 0x66472631, 0x8c5a0827, 0x2a2b2e2b, 0x27292922, 0x29271925, 0x6b9e7f26, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xabae906b, 0x8cafacac, 0x423f4970, 0x475c473f, 0x3e3f3e24, 0x3e3e6642, 0x3f31493e, 0x8c1b2547, 0x333d3f3e, 0x5c7d2431, 0x9d8c081c, 0x272b313f, 0x3d2b2927, 0x5a252529, 0x00599eab, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x97680000, 0xe3e3dcc8, 0xe1e2e2e3, 0x5d9ccce2, 0x7e8f7e5d, 0x3e3e334b, 0x3e3e3e33, 0x3f335c3e, 0x8c3d3347, 0x3e3e3f3f, 0x269d313e, 0xabab1008, 0x3e5a668e, 0x9e493d49, 0xc3af5a4f, 0x00002090, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x8b680000, 0xc8abae9e, 0xe3e3dccd, 0xcce2e0e1, 0xa0a0a09d, 0x3e3e318f, 0x332e3e31, 0x3f317f33, 0x9c83423f, 0x3e3f3f49, 0x15ab473f, 0xc2ce5c0a, 0x7f8cafac, 0xc3af7f8e, 0x6eaece9d, 0x00000032, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x808b7b80, 0x9e7d7b80, 0xe1e2cdab, 0xc0c4d9e2, 0x42425aad, 0x3333663e, 0x38318e7f, 0x9c9c423e, 0x665b5d7e, 0x089c8c67, 0xceceaf1c, 0x9d7fc3ce, 0xabdcccc0, 0x005990c8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xc8907b80, 0xd9e2dcc4, 0x31317fcc, 0x9c493f8c, 0x3e3341c4, 0xadc43f3e, 0x9c8ea0a0, 0x1b5ac39c, 0xcecece7f, 0xce839dce, 0x908cccdb, 0x00008b6e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xe2e2ae6e, 0xab7fc4db, 0xdccd9d9d, 0x33313183, 0xc0ce9c33, 0xccaaadc0, 0x7f30abc3, 0xcedbdccd, 0xccc4669c, 0x80909dac, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xe1ce7d00, 0xe1e1d9e1, 0x8cdce2e2, 0x3f333333, 0xccd9d98c, 0xdbcec4cc, 0xdbab8ece, 0x9cc3dbdb, 0xc3c4c3af, 0x7bb1dbdb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xe29e8000, 0xc89caae1, 0x5dade3dc, 0xc39d7f5d, 0xdbdcdbdb, 0xdbdbdbdc, 0xdbdbdbdb, 0xdbd9dbdb, 0xdbdbdbdb, 0xaedbdbdb, 0x00000059, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xc47b0000, 0x8090e2e2, 0xc4ab9e7b, 0xe2dbdcc3, 0xe1e1e2e2, 0xe2e1e1e1, 0xc8cddce2, 0xcdc8b6b6, 0xdbdbdbdc, 0xcedbdbdb, 0x00000090, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x90000000, 0x59ace1db, 0x20000000, 0x9e906e56, 0xacacae9e, 0x9eaeb1b1, 0xb28b8b9e, 0x6e7b8097, 0xc3ae9e7b, 0xdbdbd8db, 0x00007bc8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x6e000000, 0x7dd9e1b1, 0x00000000, 0x00000000, 0x8b808097, 0x978b808b, 0x00000000, 0x00000000, 0x80970000, 0xdbdcac90, 0x00009ed9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9ee2dc90, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xc8908000, 0x0068b6d9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xaee1ae00, 0x00000080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x68000000, 0x0090c89e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xb1cd7b00, 0x0000008b, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x008b8b8b, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xb49e0000, 0x0000008b, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00688000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8b680000, 0x00000068, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
);

int getPaletteIndexXY(in ivec2 fetch_pos)
{
    int palette_index = 0;
    if(fetch_pos.x >= 0 && fetch_pos.y >= 0
        && fetch_pos.x < int(bitmap_size.x) && fetch_pos.y < int(bitmap_size.y))
    {
        int line_index = fetch_pos.y * longs_per_line;

        int long_index = line_index + (fetch_pos.x >> 2);
        int bitmap_long = bitmap[long_index];

        int byte_index = fetch_pos.x & 0x03;
        palette_index = (bitmap_long >> (byte_index << 3)) & 0xff;
    }
    return palette_index;
}


int getPaletteIndex(in vec2 uv) {
    int palette_index = 0;
    ivec2 fetch_pos = ivec2(uv * bitmap_size);
    palette_index = getPaletteIndexXY(fetch_pos);
    return palette_index;
}

vec4 getColorFromPalette(in int palette_index) {
    int int_color = palette[palette_index];
    return vec4(float(int_color & 0xff)/ 255.0,
                float((int_color >> 8)& 0xff)/ 255.0,
                float((int_color >> 16)& 0xff)/ 255.0,
                0);
}

vec4 getBitmapColor(in vec2 uv) {
    return getColorFromPalette(getPaletteIndex(uv));
}

void iconImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = fragCoord / bitmap_size;
    fragColor = getBitmapColor(uv);
}


void main(void)
{
    vec4 text_FragColor;
    vec4 scroltext_FragColor;
    vec4 IconImage_FragColor;
    
    iconImage(IconImage_FragColor, gl_FragCoord.xy);
    mainImage(gl_FragColor, gl_FragCoord.xy);
    mainText(text_FragColor, gl_FragCoord.xy);
    secText(scroltext_FragColor, gl_FragCoord.xy);
    gl_FragColor += IconImage_FragColor;
    gl_FragColor += text_FragColor;
    gl_FragColor += scroltext_FragColor;
}